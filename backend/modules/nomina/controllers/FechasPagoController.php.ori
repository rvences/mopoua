<?php

namespace backend\modules\nomina\controllers;

use Yii;
use backend\modules\nomina\models\FechasPago;
use backend\modules\nomina\models\search\FechasPagoSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use DateTime;

/**
 * FechasPagoController implements the CRUD actions for FechasPago model.
 */
class FechasPagoController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all FechasPago models.
     * @return mixed
     */
    public function actionIndex()
    {
        $modelfp = new FechasPago();
        if ($modelfp->load(Yii::$app->request->post()) ) {
            $datetime1 = new DateTime($modelfp->de);
            $datetime2 = new DateTime($modelfp->hasta);
            $interval = $datetime1->diff($datetime2);
            $modelfp->total_dias =$interval->format('%a') + 1;


            if ( $modelfp->save()) {
                \Yii::$app->getSession()->setFlash('crear', $modelfp->de . ' - ' . $modelfp->hasta);
                return $this->redirect(['index']);
            }
        }

        $searchModel = new FechasPagoSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        if (isset($_POST['hasEditable'])) {

            $id = Yii::$app->request->post('editableKey');

            $modelo = $this->findModel($id);
            // Usando el formato de respuesta de Yii  para codificar la salida como JSON
            Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

            $actual = current($_POST['FechasPago']);
            $post['FechasPago'] = $_POST['FechasPago'][$_POST['editableIndex']];

            if ($modelo->load($post)) {


                $modelo->save();
                $output = '';
                if (isset($actual['de'])) {
                    $output = Yii::$app->formatter->asDate($modelo->cde);
                }
                if (isset($actual['hasta'])) {
                    $output = Yii::$app->formatter->asDate($modelo->hasta);
                }

                return['output'=>$output, 'message'=>''];
            }
        }


        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'modelfp' => $modelfp,
        ]);
    }

    public function actionProcesar($id) {
        return $this->render('procesar', [
            //'model' => $this->findModel($id),
        ]);
    }

    /**
     * Displays a single FechasPago model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new FechasPago model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new FechasPago();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing FechasPago model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing FechasPago model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the FechasPago model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return FechasPago the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = FechasPago::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

}
